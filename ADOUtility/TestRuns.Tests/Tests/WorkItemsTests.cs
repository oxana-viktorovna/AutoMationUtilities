using ADOCore;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SharedCore.Settings;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using TestRuns.Steps;

namespace TestRuns.Tests.Tests
{
    [TestClass]
    public class WorkItemsTests
    {
        private AdoSettings adoSettings;
        private WorkItemApiSteps apiSteps;

        [TestInitialize]
        public void TestInit()
        {
            var adoSettingsReader = new SettingsReader("ADOconfig.json");
            adoSettings = new AdoSettings(adoSettingsReader);
            apiSteps = new WorkItemApiSteps(adoSettings);
        }

        [TestMethod]
        public void UpdateAutoAssociation()
        {
            var fullTestNames = GetFullTestNames();
            var errors = new StringBuilder();
            foreach (var fullTestName in fullTestNames)
            {
                var testNumber = GetTestNumber(fullTestName);
                if (testNumber != 0)
                {
                    var responce = apiSteps.UpdateAutomationAssociation(testNumber, fullTestName);
                    if(responce.StatusCode != HttpStatusCode.OK)
                            errors.AppendLine($"{testNumber} had not been assosiated. {responce.Content}");
                }
            }

            var result = errors.ToString();
            Assert.AreEqual(string.Empty, result, result);
        }

        [TestMethod]
        public void AddLinks()
        {
            var testNumber = 270924;
            var linkids = new int[] {14704,
14705 ,
14717 ,
15271 ,
15653 ,
15738 ,
15756 ,
16055 ,
16181 ,
16190 ,
16560 ,
17119 ,
19860 ,
23778 ,
24056 ,
24076 ,
24326 ,
25251 ,
25266 ,
42007 ,
44288 ,
44289 ,
56658 ,
58159 ,
59312 ,
62320 ,
62985 ,
70513 ,
74376 ,
77334 ,
77335 ,
77392 ,
78734 ,
94351 ,
97755 ,
105086,
118523,
126509,
126511,
126513,
127470,
127575,
127678,
127870,
129161,
129564,
129824,
130075,
131224,
131387,
132943,
134631,
135812,
136465,
138382,
138388,
138479,
138612,
139069,
139071,
139091,
139179,
139180,
139226,
139308,
139318,
139319,
139460,
139642,
139643,
139825,
139826,
139835,
139924,
139925,
139926,
140254,
140597,
140604,
140621,
140622,
140629,
140635,
140640,
140643,
140648,
140656,
140660,
140667,
140670,
140671,
140806,
140816,
140817,
140996,
141156,
141180,
141277,
141279,
141384,
141743,
141744,
141785,
141786,
141846,
142011,
142022,
142259,
142298,
142370,
142371,
142681,
142795,
142881,
142882,
142883,
143028,
143029,
143051,
143052,
143089,
143411,
143538,
143542,
143544,
143547,
143548,
143848,
144199,
144253,
144254,
144263,
144268,
144492,
145053,
145055,
145059,
145061,
145063,
145066,
145792,
145830,
146748,
146972,
147085,
147272,
148214,
148215,
148217,
148219,
149616,
150414,
150757,
150758,
150759,
150853,
151672,
151673,
151809,
152019,
152073,
152130,
152176,
153770,
153771,
154177,
154190,
154896,
154919,
154939,
155569,
155585,
155659,
157167,
157754,
157760,
157768,
158294,
158307,
158311,
158312,
158319,
158322,
158323,
158326,
158327,
159627,
159820,
160331,
160507,
160881,
161719,
161720,
161898,
161902,
161903,
161905,
161909,
161910,
161912,
162331,
167005,
167740,
169088,
169097,
169932,
169935,
172819,
173643,
174925,
174958,
174959,
175450,
176357,
176361,
176362,
176363,
176364,
176424,
176686,
177656,
179287,
179288,
180192,
181873,
185479,
185563,
187360,
188469,
193196,
193199,
195036,
195347,
195366,
195604,
198088,
206470,
206518,
206519,
207603,
207604,
207605,
208794,
211964,
213189,
213191,
215260,
218733,
218780,
218781,
226636,
226679,
226873,
226874,
227544,
228166,
228213,
229680,
230199,
232247,
232747,
233270,
233319,
233338,
233339,
233340,
233341,
233343,
233416,
233536,
233548,
233588,
233590,
233596,
233597,
233698,
234169,
238167,
238267,
238270,
239395,
240907,
242185,
242186,
242187,
242190,
242191,
242192,
242466,
242468,
243032,
243034,
243035,
243036,
243037,
243038,
243039,
243153,
243189,
243210,
243232,
243233,
243561,
243630,
243648,
243693,
244731,
244732,
245044,
245046,
245428,
245939,
246967,
247103,
247177,
247178,
247179,
247411,
247413,
247414,
247845,
247846,
248389,
248719,
249086,
249095,
249101,
249252,
249253,
249267,
249926,
249972,
249973,
249975,
249977,
249989,
249994,
250381,
251052,
251053,
251119,
252350,
253762,
253768,
253769,
253770,
253771,
253772,
253773,
253995,
253996,
254195,
255088,
255089,
257494,
257903,
257904,
257905,
257920,
257965,
258848,
258849,
258850,
258992,
258993,
259008,
259066,
259067,
259263,
259264,
259265,
259267,
259268,
259269,
259270,
259583,
259584,
259586,
259616,
259618,
259620,
259621,
261328,
261332,
261335,
261336,
261693,
261854,
262712,
262714,
262716,
262720,
262722,
262725,
262726,
262727,
262728,
265472,
265473,
265484,
265812,
265814,
265828,
265832,
265867,
266172,
266173,
266174,
266592,
266594,
267664,
267689,
267690,
267694,
267695,
267697,
267699,
267700,
267865,
267936,
267937,
267938,
268997,
268998,
269000,
269160,
269822,
270046,
270078,
270079,
270081,
270085,
270348,
270349 };
            var responce = apiSteps.AddTestedByLinksToWorkItem(testNumber, linkids);
            Assert.AreEqual (HttpStatusCode.OK, responce.StatusCode);
        }

        private List<string> GetFullTestNames()
        {
            var filePath = "C:\\Users\\Aksana_Murashka\\Documents\\TRI-SRTR\\BVT\\FullTestNames.txt";
            var fileData = File.ReadAllLines(filePath);
            var regex = new Regex("\\(([^()]*)\\)");
            var result = fileData.Select(d =>
            {
                d = d.Trim().Replace(":", ".");
                var m = regex.Match(d);
                if(!string.IsNullOrEmpty(m.Value))
                    d = d.Replace(m.Value, "");

                return d;
                }).Distinct().ToList();

            return result;
        }

        private List<int> GetTestNumbers(List<string> testNames)
        {
            var result = testNames.Select(name => GetTestNumber(name)).Distinct().ToList();
            result.Remove(0);

            return result;
        }

        private int GetTestNumber(string testName)
        {
            var regex = new Regex(@"T\d+_");
            var number = regex.Match(testName).Groups[0].Value.Replace("T", "").Replace("_", "");

            return string.IsNullOrEmpty(number) ? 0 : Convert.ToInt32(number);
        }
    }
}
